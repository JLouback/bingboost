Team:
  Anthony Dubis (ajd2194) & Juliana Louback (jl4354)
  
Files:
  BingBoost.java - Query modification algorithm
  Interaction.java - All user interaction
  Result.java - Object for storing result data
  Utils.java - Utility methods
  stopwords.txt - List of stopwords from the Onix Text Retrieval Toolkit
  BingBoost.jar (includes java.io, java.util and json libraries)
  
How to run:
  java -jar BingBoost.jar <account_key> <precision> <query>
  Example: java -jar BingBoost.jar mykey123 0.9 'milky way'

Internal design:
  1) Interaction receives account key, precision and query from the user.
  2) Interaction calls Utils method queryBing with the account key and query; 
     this method will query the Bing API (default configurations), returning a
     JSON array of results.
  3) Interaction displays the top 10 titles, urls and descriptions of each
     results, collecting relevancy feedback.
  4) Interaction saves an array of 10 Result objects, containing the respective
     title, description and relevancy.
  If precision is not 0 or above desired precision:
  5) Interaction calls BingBoost funciton updatedQueryForFeedback, sending the
     array of Results and query as input, receiving the enhanced query as output.
  6) Repeat steps 2-5 with enhanced query until desired or zero precision.

Query modification method:
  1) The method updatedQueryForFeedback receives a query and an array of Result
     objects as parameters.
  2) From (1), call createNormalizedMaps which populates two HashMaps, 'matches'
     and 'misses'. The keys are the words extracted from the Result title and
     description, the values are the frequency of the respective term, normalized
     by the total number of words from all titles/descriptions for relevant and
     non-relevant results, respectively. Data pertaining to the relevant results
     is in 'matches', non-relevant in 'misses'. Note that words in the title
     receive 3 counts per occurrence and in the description only 1.
  3) Words beginning within 30 characters of the beginning of the query (if 
     occurring in Result descriptions) have their score increased by 20%, both
     for relevant and non-relevant results (method queryProximityBonus).
  4) All scores (values) in misses are subtracted from the scores in misses,
     providing keys match (method subtractMaps).
  5) The word (key) with the highest score is selected as the suggested
     enhancement (method suggestedWordToEnhanceQuery).
  6) For all relevant Results, count occurrences of suggested enhancement
     appearing before and after query in both the title and description. By
     majority vote, return the enhanced query with the suggested enhancement
     at the beginning or appended to the end (updateQueryWithSuggestion).
     Note only first occurences are considered; a more elaborate analysis would
     be possible with sentence extractio. However the result descriptions
     are frequently an unstructured collage of phrases, not complete senteces.

Bing Search Account Key:
  
Additional information:
  1) We are only adding one word per iteration.
  2) Due to an oversight, we implemented a 'enhancement reversal' function.
     On iteration k (for k > 1), if the word added to the query on iteration k - 1
     appeared frequently in the results marked as non-relevant, this term was
     removed from the current query. The enhanced query for iteration k was then
     the query at iteration k - 2 and the suggested enhancement at iteration k.
     A prior enhancement would be deemed ambiguous and consequently reverted if the
     score on non-relevant results was above the average in iteration k. This
     worked well when a mishap with API calls only returned one relevant result for
     'gates', this being Bill & Melinda Gates Foundation which initially suggested
     adding 'melinda' to the query. By the next round, 'melinda' was removed
     and 'bill' added, then reaching 0.9+ precision.
